package edu.fmi.ir.booksearch;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.RAMDirectory;
import org.apache.lucene.util.Version;

public class BookIndex {

	private final IndexWriter writer;

	private static final String FIELD_TITLE = "title";

	private static final String FIELD_PATH_IMAGE = "imagePath";

	private static final String FIELD_CONTENT = "content";

	public BookIndex() throws IOException {
		final RAMDirectory indexDirectory = new RAMDirectory();
		final IndexWriterConfig config = new IndexWriterConfig(
				Version.LUCENE_46, new StandardAnalyzer(Version.LUCENE_46));
		writer = new IndexWriter(indexDirectory, config);
	}

	public void index(final String title, final String imagePath,
			final String bookPath) {
		final Document document = new Document();
		document.add(new TextField(FIELD_TITLE, title, Field.Store.YES));
		document.add(new TextField(FIELD_PATH_IMAGE, imagePath, Field.Store.YES));

		try {
			final Scanner scanner = new Scanner(new File(bookPath));
			final StringBuilder builder = new StringBuilder();
			while (scanner.hasNextLine()) {
				builder.append(scanner.nextLine());
			}
			document.add(new TextField(FIELD_CONTENT, builder.toString(),
					Field.Store.YES));
			writer.addDocument(document);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void query(final String query) {
		final StandardAnalyzer analyzer = new StandardAnalyzer(
				Version.LUCENE_46);
		final QueryParser parser = new QueryParser(Version.LUCENE_46,
				FIELD_SUMMARY, analyzer);
		final Query query = parser.parse(movie.toString());
		final TopScoreDocCollector collector = TopScoreDocCollector.create(
				numberOfHits, true);

		final IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(
				writer, false));
		searcher.search(query, collector);

		final Map<Movie, Float> result = new LinkedHashMap<Movie, Float>();
		final ScoreDoc[] scoreDocs = collector.topDocs().scoreDocs;
		for (final ScoreDoc doc : scoreDocs) {
			result.put(indexedMovies.get(doc.doc), 1 - doc.score);
		}
		return result;

	}
}
